// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ConnectedCache.Models
{
    /// <summary> Update Cycle type. </summary>
    public readonly partial struct CycleType : IEquatable<CycleType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CycleType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CycleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PreviewValue = "Preview";
        private const string SlowValue = "Slow";
        private const string FastValue = "Fast";

        /// <summary> customer selection of preview update install mcc on their physical vm. </summary>
        public static CycleType Preview { get; } = new CycleType(PreviewValue);
        /// <summary> customer selection of slow update to install mcc on their physical vm. </summary>
        public static CycleType Slow { get; } = new CycleType(SlowValue);
        /// <summary> customer selection of fast / auto update to install mcc on their physical vm. </summary>
        public static CycleType Fast { get; } = new CycleType(FastValue);
        /// <summary> Determines if two <see cref="CycleType"/> values are the same. </summary>
        public static bool operator ==(CycleType left, CycleType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CycleType"/> values are not the same. </summary>
        public static bool operator !=(CycleType left, CycleType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CycleType"/>. </summary>
        public static implicit operator CycleType(string value) => new CycleType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CycleType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CycleType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
