// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ConnectedCache.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmConnectedCacheModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ConnectedCache.EnterpriseMccCacheNodeResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="ConnectedCache.EnterpriseMccCacheNodeResourceData"/> instance for mocking. </returns>
        public static EnterpriseMccCacheNodeResourceData EnterpriseMccCacheNodeResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CacheNodeProperty properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new EnterpriseMccCacheNodeResourceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CacheNodeProperty"/>. </summary>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="cacheNode"> Mcc cache node resource (cache node entity). </param>
        /// <param name="additionalCacheNodeProperties"> Mcc cache node resource additional properties. </param>
        /// <param name="statusCode"> Mcc response status code. </param>
        /// <param name="statusText"> Mcc response status text as string for retrieving status details. </param>
        /// <param name="statusDetails"> Mcc response status details for retrieving response inner details. </param>
        /// <param name="status"> HTTP error status code. </param>
        /// <param name="error"> Mcc response error details. </param>
        /// <returns> A new <see cref="Models.CacheNodeProperty"/> instance for mocking. </returns>
        public static CacheNodeProperty CacheNodeProperty(ProvisioningState? provisioningState = null, CacheNodeEntity cacheNode = null, AdditionalCacheNodeProperties additionalCacheNodeProperties = null, string statusCode = null, string statusText = null, string statusDetails = null, string status = null, ResponseError error = null)
        {
            return new CacheNodeProperty(
                provisioningState,
                cacheNode,
                additionalCacheNodeProperties,
                statusCode,
                statusText,
                statusDetails,
                status,
                error,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CacheNodeEntity"/>. </summary>
        /// <param name="fullyQualifiedResourceId"> Cache node resource Azure fully qualified resource Id. </param>
        /// <param name="customerId"> Cache node resource customer resource GUID Id. </param>
        /// <param name="customerName"> Cache node resource customer resource name. </param>
        /// <param name="ipAddress"> Cache node resource Ip address. </param>
        /// <param name="customerIndex"> Cache node resource customer index as string. </param>
        /// <param name="cacheNodeId"> Cache node resource identifier of the cache node. </param>
        /// <param name="cacheNodeName"> Cache node resource name. </param>
        /// <param name="customerAsn"> Cache node resource customer resource Asn (autonomous system number). </param>
        /// <param name="isEnabled"> Cache node resource flag for indicating if cache node is enabled. </param>
        /// <param name="maxAllowableEgressInMbps"> Cache node resource maximum allowed egress in Mbps. </param>
        /// <param name="maxAllowableProbability"> Cache node resource maximum allowed probability of egress. </param>
        /// <param name="xCid"> Cache node resource Azure XCid. </param>
        /// <param name="isEnterpriseManaged"> Cache node resource flag for determining if managed by enterprise as boolean. </param>
        /// <param name="createAsyncOperationId"> Cache node resource create async operation Id. </param>
        /// <param name="deleteAsyncOperationId"> Cache node resource deletion async operation Id. </param>
        /// <param name="clientTenantId"> Cache node resource customer resource client tenant Id of subscription. </param>
        /// <param name="category"> Cache node resource category. </param>
        /// <param name="releaseVersion"> Cache node resource release version. </param>
        /// <param name="lastSyncWithAzureTimestamp"> Cache node resource last sync timestamp. </param>
        /// <param name="lastUpdatedTimestamp"> Cache node resource last backend updated timestamp. </param>
        /// <param name="synchWithAzureAttemptsCount"> Cache node resource attempts to sync with Azure. </param>
        /// <param name="containerConfigurations"> Cache node resource container configuration details. </param>
        /// <param name="cidrCsv"> Cache node resource comma separated values of Cidrs. </param>
        /// <param name="cidrCsvLastUpdateOn"> Cache node resource last Cidr Csv update timestamp. </param>
        /// <param name="bgpCidrCsvLastUpdateOn"> Cache node resource last Bgp Cidr Csv update timestamp. </param>
        /// <param name="bgpLastReportedOn"> Cache node resource last Bgp report timestamp. </param>
        /// <param name="bgpReviewStateText"> Cache node resource Bgp review state string text in detail. </param>
        /// <param name="bgpReviewState"> Cache node resource Bgp review state string text. </param>
        /// <param name="bgpReviewFeedback"> Cache node resource Bgp review feedback text. </param>
        /// <param name="bgpNumberOfTimesUpdated"> Cache node resource Bgp update count. </param>
        /// <param name="bgpNumberOfRecords"> Cache node resource Bgp record count. </param>
        /// <param name="bgpCidrBlocksCount"> Cache node resource Bgp block count. </param>
        /// <param name="bgpAddressSpace"> Cache node resource total addressable space defined by Bgp and Cidr Csv blocks. </param>
        /// <param name="shouldMigrate"> Cache node resource flag for determining if customer will be migrated. </param>
        /// <param name="bgpFileBytesTruncated"> Cache node resource bytes truncated from Bgp output file. </param>
        /// <param name="cidrSelectionType"> Cache node resource current Cidr range precedence selection type. </param>
        /// <param name="isFrozen"> Cache node resource flag for indicating the cache node resource is frozen (not selectable, not editable in UI). </param>
        /// <param name="reviewState"> Cache node resource review process state as integer. </param>
        /// <param name="reviewStateText"> Cache node resource review state text. </param>
        /// <param name="reviewFeedback"> Cache node resource review feedback text. </param>
        /// <param name="configurationState"> Cache node resource configuration state. </param>
        /// <param name="configurationStateText"> Cache node resource configuration state text. </param>
        /// <param name="addressSpace"> Cache node resource total addressable space defined by the Cidr Csv block. </param>
        /// <param name="workerConnections"> Cache node resource Mcc container deployment worker connection count. </param>
        /// <param name="workerConnectionsLastUpdatedOn"> Cache node resource last updated Mcc container deployment worker connection count timestamp. </param>
        /// <param name="containerResyncTrigger"> Cache node resource Mcc container configuration details re-sync trigger. </param>
        /// <param name="imageUri"> Cache node resource Mcc Container Id Uri. </param>
        /// <param name="fullyQualifiedDomainName"> FQDN(fully qualified domain name) value of the mcc cache node. </param>
        /// <param name="autoUpdateRingType"> Auto Update Ring Type which is slow or fast etc. </param>
        /// <param name="autoUpdateRequestedWeek"> Customer requested week of month for mcc install of auto update cycle. </param>
        /// <param name="autoUpdateRequestedDay"> Customer requested day of week for mcc install of auto update cycle. </param>
        /// <param name="autoUpdateRequestedTime"> Customer requested time of the day for mcc install of auto update cycle, should be hh:mm. </param>
        /// <returns> A new <see cref="Models.CacheNodeEntity"/> instance for mocking. </returns>
        public static CacheNodeEntity CacheNodeEntity(string fullyQualifiedResourceId = null, string customerId = null, string customerName = null, string ipAddress = null, string customerIndex = null, string cacheNodeId = null, string cacheNodeName = null, int? customerAsn = null, bool? isEnabled = null, int? maxAllowableEgressInMbps = null, float? maxAllowableProbability = null, string xCid = null, bool? isEnterpriseManaged = null, string createAsyncOperationId = null, string deleteAsyncOperationId = null, string clientTenantId = null, string category = null, int? releaseVersion = null, DateTimeOffset? lastSyncWithAzureTimestamp = null, DateTimeOffset? lastUpdatedTimestamp = null, int? synchWithAzureAttemptsCount = null, string containerConfigurations = null, IEnumerable<string> cidrCsv = null, DateTimeOffset? cidrCsvLastUpdateOn = null, DateTimeOffset? bgpCidrCsvLastUpdateOn = null, DateTimeOffset? bgpLastReportedOn = null, string bgpReviewStateText = null, BgpReviewStateEnum? bgpReviewState = null, string bgpReviewFeedback = null, int? bgpNumberOfTimesUpdated = null, int? bgpNumberOfRecords = null, int? bgpCidrBlocksCount = null, int? bgpAddressSpace = null, bool? shouldMigrate = null, int? bgpFileBytesTruncated = null, int? cidrSelectionType = null, bool? isFrozen = null, int? reviewState = null, string reviewStateText = null, string reviewFeedback = null, ConfigurationState? configurationState = null, string configurationStateText = null, int? addressSpace = null, int? workerConnections = null, DateTimeOffset? workerConnectionsLastUpdatedOn = null, int? containerResyncTrigger = null, string imageUri = null, string fullyQualifiedDomainName = null, AutoUpdateRingType? autoUpdateRingType = null, int? autoUpdateRequestedWeek = null, int? autoUpdateRequestedDay = null, string autoUpdateRequestedTime = null)
        {
            cidrCsv ??= new List<string>();

            return new CacheNodeEntity(
                fullyQualifiedResourceId,
                customerId,
                customerName,
                ipAddress,
                customerIndex,
                cacheNodeId,
                cacheNodeName,
                customerAsn,
                isEnabled,
                maxAllowableEgressInMbps,
                maxAllowableProbability,
                xCid,
                isEnterpriseManaged,
                createAsyncOperationId,
                deleteAsyncOperationId,
                clientTenantId,
                category,
                releaseVersion,
                lastSyncWithAzureTimestamp,
                lastUpdatedTimestamp,
                synchWithAzureAttemptsCount,
                containerConfigurations,
                cidrCsv?.ToList(),
                cidrCsvLastUpdateOn,
                bgpCidrCsvLastUpdateOn,
                bgpLastReportedOn,
                bgpReviewStateText,
                bgpReviewState,
                bgpReviewFeedback,
                bgpNumberOfTimesUpdated,
                bgpNumberOfRecords,
                bgpCidrBlocksCount,
                bgpAddressSpace,
                shouldMigrate,
                bgpFileBytesTruncated,
                cidrSelectionType,
                isFrozen,
                reviewState,
                reviewStateText,
                reviewFeedback,
                configurationState,
                configurationStateText,
                addressSpace,
                workerConnections,
                workerConnectionsLastUpdatedOn,
                containerResyncTrigger,
                imageUri,
                fullyQualifiedDomainName,
                autoUpdateRingType,
                autoUpdateRequestedWeek,
                autoUpdateRequestedDay,
                autoUpdateRequestedTime,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdditionalCacheNodeProperties"/>. </summary>
        /// <param name="cacheNodePropertiesDetailsIssuesList"> issues list to return the issues as part of the additional cache node properties. </param>
        /// <param name="aggregatedStatusDetails"> Cache node resource aggregated status details. </param>
        /// <param name="aggregatedStatusText"> Cache node resource aggregated status text. </param>
        /// <param name="aggregatedStatusCode"> Cache node resource aggregated status code. </param>
        /// <param name="productVersion"> Cache node resource Mcc product version. </param>
        /// <param name="isProvisioned"> Cache node resource flag indicating if cache node has been physically installed or provisioned on their physical lab. </param>
        /// <param name="cacheNodeStateDetailedText"> Cache node resource detailed state text. </param>
        /// <param name="cacheNodeStateShortText"> Cache node resource short state text. </param>
        /// <param name="cacheNodeState"> Cache node resource state as integer. </param>
        /// <param name="driveConfiguration"> Cache node resource drive configurations. </param>
        /// <param name="bgpAsnToIPAddressMapping"> Cache node resource Bgp configuration. </param>
        /// <param name="proxyUri"> proxyUrl configuration of the cache node. </param>
        /// <param name="isProxyRequired"> Cache node resource requires a proxy. </param>
        /// <param name="osType"> Operating system of the cache node. </param>
        /// <param name="updateCycleType"> Update Cycle Type. </param>
        /// <param name="autoUpdateVersion"> Auto update or fast update version. </param>
        /// <param name="updateInfoDetails"> Update related information details. </param>
        /// <param name="updateRequestedOn"> customer requested date time for mcc install of update cycle. </param>
        /// <param name="autoUpdateNextAvailableVersion"> Auto update version that is the Next available version to update on mcc cache node. </param>
        /// <param name="autoUpdateNextAvailableOn"> Auto update last applied date time of mcc install. </param>
        /// <param name="autoUpdateAppliedVersion"> Auto update version that is the applied to update on mcc cache node. </param>
        /// <param name="autoUpdateLastAppliedDetails"> Auto Update status details from the backend after applying the new version details. </param>
        /// <param name="autoUpdateLastAppliedState"> Last applied auto update state for mcc install of auto update cycle. </param>
        /// <param name="autoUpdateLastAppliedOn"> Auto update last applied date time of mcc install. </param>
        /// <param name="autoUpdateLastTriggeredOn"> Auto update last triggered date time of mcc install. </param>
        /// <param name="creationMethod"> Resource creation method of mcc cache node resource, cli or portal. </param>
        /// <param name="optionalProperty1"> Optional property #1 of Mcc response object. </param>
        /// <param name="optionalProperty2"> Optional property #2 of Mcc response object. </param>
        /// <param name="optionalProperty3"> Optional property #3 of Mcc response object. </param>
        /// <param name="optionalProperty4"> Optional property #4 of Mcc response object. </param>
        /// <param name="optionalProperty5"> Optional property #5 of Mcc response object. </param>
        /// <returns> A new <see cref="Models.AdditionalCacheNodeProperties"/> instance for mocking. </returns>
        public static AdditionalCacheNodeProperties AdditionalCacheNodeProperties(IEnumerable<string> cacheNodePropertiesDetailsIssuesList = null, string aggregatedStatusDetails = null, string aggregatedStatusText = null, int? aggregatedStatusCode = null, string productVersion = null, bool? isProvisioned = null, string cacheNodeStateDetailedText = null, string cacheNodeStateShortText = null, int? cacheNodeState = null, IEnumerable<CacheNodeDriveConfiguration> driveConfiguration = null, string bgpAsnToIPAddressMapping = null, string proxyUri = null, ProxyRequired? isProxyRequired = null, OSType? osType = null, CycleType? updateCycleType = null, string autoUpdateVersion = null, string updateInfoDetails = null, DateTimeOffset? updateRequestedOn = null, string autoUpdateNextAvailableVersion = null, DateTimeOffset? autoUpdateNextAvailableOn = null, string autoUpdateAppliedVersion = null, string autoUpdateLastAppliedDetails = null, string autoUpdateLastAppliedState = null, DateTimeOffset? autoUpdateLastAppliedOn = null, DateTimeOffset? autoUpdateLastTriggeredOn = null, int? creationMethod = null, string optionalProperty1 = null, string optionalProperty2 = null, string optionalProperty3 = null, string optionalProperty4 = null, string optionalProperty5 = null)
        {
            cacheNodePropertiesDetailsIssuesList ??= new List<string>();
            driveConfiguration ??= new List<CacheNodeDriveConfiguration>();

            return new AdditionalCacheNodeProperties(
                cacheNodePropertiesDetailsIssuesList?.ToList(),
                aggregatedStatusDetails,
                aggregatedStatusText,
                aggregatedStatusCode,
                productVersion,
                isProvisioned,
                cacheNodeStateDetailedText,
                cacheNodeStateShortText,
                cacheNodeState,
                driveConfiguration?.ToList(),
                bgpAsnToIPAddressMapping != null ? new BgpConfiguration(bgpAsnToIPAddressMapping, serializedAdditionalRawData: null) : null,
                proxyUri != null ? new ProxyUrlConfiguration(proxyUri, serializedAdditionalRawData: null) : null,
                isProxyRequired,
                osType,
                updateCycleType,
                autoUpdateVersion,
                updateInfoDetails,
                updateRequestedOn,
                autoUpdateNextAvailableVersion,
                autoUpdateNextAvailableOn,
                autoUpdateAppliedVersion,
                autoUpdateLastAppliedDetails,
                autoUpdateLastAppliedState,
                autoUpdateLastAppliedOn,
                autoUpdateLastTriggeredOn,
                creationMethod,
                optionalProperty1,
                optionalProperty2,
                optionalProperty3,
                optionalProperty4,
                optionalProperty5,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MccCacheNodeInstallDetails"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Mcc cache node resource install script details. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <returns> A new <see cref="Models.MccCacheNodeInstallDetails"/> instance for mocking. </returns>
        public static MccCacheNodeInstallDetails MccCacheNodeInstallDetails(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, CacheNodeInstallProperties properties = null, IReadOnlyDictionary<string, string> tags = null, string location = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MccCacheNodeInstallDetails(
                id,
                name,
                resourceType,
                systemData,
                properties,
                tags,
                location,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CacheNodeInstallProperties"/>. </summary>
        /// <param name="customerId"> Mcc customer resource Id. </param>
        /// <param name="cacheNodeId"> Mcc cache node resource Id. </param>
        /// <param name="primaryAccountKey"> Mcc primary account key. Internal to Mcc. </param>
        /// <param name="secondaryAccountKey"> Mcc secondary account key. Internal to Mcc. </param>
        /// <param name="registrationKey"> Mcc Iot Central temporary device registration key, used once. </param>
        /// <param name="driveConfiguration"> Cache node resource drive configurations. </param>
        /// <param name="proxyUri"> proxyUrl configuration of the cache node. </param>
        /// <returns> A new <see cref="Models.CacheNodeInstallProperties"/> instance for mocking. </returns>
        public static CacheNodeInstallProperties CacheNodeInstallProperties(string customerId = null, string cacheNodeId = null, string primaryAccountKey = null, string secondaryAccountKey = null, string registrationKey = null, IEnumerable<CacheNodeDriveConfiguration> driveConfiguration = null, string proxyUri = null)
        {
            driveConfiguration ??= new List<CacheNodeDriveConfiguration>();

            return new CacheNodeInstallProperties(
                customerId,
                cacheNodeId,
                primaryAccountKey,
                secondaryAccountKey,
                registrationKey,
                driveConfiguration?.ToList(),
                proxyUri != null ? new ProxyUrlConfiguration(proxyUri, serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ConnectedCache.EnterpriseMccCustomerResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="ConnectedCache.EnterpriseMccCustomerResourceData"/> instance for mocking. </returns>
        public static EnterpriseMccCustomerResourceData EnterpriseMccCustomerResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CustomerProperty properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new EnterpriseMccCustomerResourceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomerProperty"/>. </summary>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="customer"> Mcc customer resource (customer entity). </param>
        /// <param name="additionalCustomerProperties"> Mcc customer resource additional properties. </param>
        /// <param name="statusCode"> Mcc response status code. </param>
        /// <param name="statusText"> Mcc response status text as string for retrieving status details. </param>
        /// <param name="statusDetails"> Mcc response status details for retrieving response inner details. </param>
        /// <param name="status"> HTTP error status code. </param>
        /// <param name="error"> Mcc response error details. </param>
        /// <returns> A new <see cref="Models.CustomerProperty"/> instance for mocking. </returns>
        public static CustomerProperty CustomerProperty(ProvisioningState? provisioningState = null, CustomerEntity customer = null, AdditionalCustomerProperties additionalCustomerProperties = null, string statusCode = null, string statusText = null, string statusDetails = null, string status = null, ResponseError error = null)
        {
            return new CustomerProperty(
                provisioningState,
                customer,
                additionalCustomerProperties,
                statusCode,
                statusText,
                statusDetails,
                status,
                error,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CustomerEntity"/>. </summary>
        /// <param name="fullyQualifiedResourceId"> Customer resource Azure fully qualified resource Id. </param>
        /// <param name="customerId"> Customer resource Guid Id. </param>
        /// <param name="customerName"> Customer resource name. </param>
        /// <param name="contactEmail"> Customer resource contact email. </param>
        /// <param name="contactPhone"> Customer resource contact phone. </param>
        /// <param name="contactName"> Customer resource contact full name. </param>
        /// <param name="isEntitled"> Customer resource entitlement flag as boolean. </param>
        /// <param name="releaseVersion"> Customer resource Mcc release version. </param>
        /// <param name="createAsyncOperationId"> Customer resource create async operation Id. </param>
        /// <param name="deleteAsyncOperationId"> Customer resource deletion async operation Id. </param>
        /// <param name="clientTenantId"> Customer resource client tenant Id of subscription. </param>
        /// <param name="synchWithAzureAttemptsCount"> Customer resource sync attempts. </param>
        /// <param name="lastSyncWithAzureTimestamp"> Customer resource last Azure sync timestamp. </param>
        /// <param name="isEnterpriseManaged"> Customer resource flag for enterprise management as boolean. </param>
        /// <param name="shouldMigrate"> Customer resource flag for migration. </param>
        /// <param name="resendSignupCode"> Customer resource flag for resending signup code as boolean. </param>
        /// <param name="verifySignupCode"> Customer resource flag for requiring verification of signup code as boolean. </param>
        /// <param name="verifySignupPhrase"> Customer resource phrase for verifying signup. </param>
        /// <returns> A new <see cref="Models.CustomerEntity"/> instance for mocking. </returns>
        public static CustomerEntity CustomerEntity(string fullyQualifiedResourceId = null, string customerId = null, string customerName = null, string contactEmail = null, string contactPhone = null, string contactName = null, bool? isEntitled = null, int? releaseVersion = null, string createAsyncOperationId = null, string deleteAsyncOperationId = null, string clientTenantId = null, int? synchWithAzureAttemptsCount = null, DateTimeOffset? lastSyncWithAzureTimestamp = null, bool? isEnterpriseManaged = null, bool? shouldMigrate = null, bool? resendSignupCode = null, bool? verifySignupCode = null, string verifySignupPhrase = null)
        {
            return new CustomerEntity(
                fullyQualifiedResourceId,
                customerId,
                customerName,
                contactEmail,
                contactPhone,
                contactName,
                isEntitled,
                releaseVersion,
                createAsyncOperationId,
                deleteAsyncOperationId,
                clientTenantId,
                synchWithAzureAttemptsCount,
                lastSyncWithAzureTimestamp,
                isEnterpriseManaged,
                shouldMigrate,
                resendSignupCode,
                verifySignupCode,
                verifySignupPhrase,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdditionalCustomerProperties"/>. </summary>
        /// <param name="customerPropertiesOverviewCacheEfficiency"> Customer resource cache efficiency. </param>
        /// <param name="customerPropertiesOverviewAverageEgressMbps"> Customer resource average egress in Mbps. </param>
        /// <param name="customerPropertiesOverviewAverageMissMbps"> Customer resource average cache miss throughput in Mbps. </param>
        /// <param name="customerPropertiesOverviewEgressMbpsMax"> Customer resource maximum egress in Mbps. </param>
        /// <param name="customerPropertiesOverviewEgressMbpsMaxOn"> Customer resource peak egress timestamp. </param>
        /// <param name="customerPropertiesOverviewMissMbpsMax"> Customer resource maximum cache miss throughput in Mbps. </param>
        /// <param name="customerPropertiesOverviewMissMbpsMaxOn"> Customer resource peak cache miss throughput timestamp. </param>
        /// <param name="customerPropertiesOverviewCacheNodesHealthyCount"> Customer resource total healthy cache nodes. </param>
        /// <param name="customerPropertiesOverviewCacheNodesUnhealthyCount"> Customer resource total unhealthy cache nodes. </param>
        /// <param name="signupStatus"> Customer resource signup status as boolean. </param>
        /// <param name="signupStatusCode"> Customer resource signup status as integer code. </param>
        /// <param name="signupStatusText"> Customer resource signup status as string text. </param>
        /// <param name="signupPhaseStatusCode"> Customer resource signup phase status code as integer. </param>
        /// <param name="signupPhaseStatusText"> Customer resource signup phase status as string text. </param>
        /// <param name="peeringDbLastUpdateDateValue"> Customer resource last PeeringDB update timestamp. </param>
        /// <param name="customerOrgName"> Customer resource owner organization name. </param>
        /// <param name="customerEmail"> Customer resource contact email. </param>
        /// <param name="customerTransitAsn"> Customer resource transit Asn (autonomous system number). </param>
        /// <param name="customerTransitState"> Customer resource transit state. </param>
        /// <param name="customerAsn"> Customer resource Asn (autonomous system number). </param>
        /// <param name="customerAsnEstimatedEgressPeekGbps"> Customer resource estimated Asn peering peak in Gbps. </param>
        /// <param name="customerEntitlementSkuId"> Customer resource entitlement Sku Id. </param>
        /// <param name="customerEntitlementSkuGuid"> Customer resource entitlement Sku Guid. </param>
        /// <param name="customerEntitlementSkuName"> Customer resource entitlement Sku name. </param>
        /// <param name="customerEntitlementExpiration"> Customer resource entitlement expiration date string. </param>
        /// <param name="optionalProperty1"> Optional property #1 of Mcc response object. </param>
        /// <param name="optionalProperty2"> Optional property #2 of Mcc response object. </param>
        /// <param name="optionalProperty3"> Optional property #3 of Mcc response object. </param>
        /// <param name="optionalProperty4"> Optional property #4 of Mcc response object. </param>
        /// <param name="optionalProperty5"> Optional property #5 of Mcc response object. </param>
        /// <returns> A new <see cref="Models.AdditionalCustomerProperties"/> instance for mocking. </returns>
        public static AdditionalCustomerProperties AdditionalCustomerProperties(float? customerPropertiesOverviewCacheEfficiency = null, float? customerPropertiesOverviewAverageEgressMbps = null, float? customerPropertiesOverviewAverageMissMbps = null, float? customerPropertiesOverviewEgressMbpsMax = null, DateTimeOffset? customerPropertiesOverviewEgressMbpsMaxOn = null, float? customerPropertiesOverviewMissMbpsMax = null, DateTimeOffset? customerPropertiesOverviewMissMbpsMaxOn = null, int? customerPropertiesOverviewCacheNodesHealthyCount = null, int? customerPropertiesOverviewCacheNodesUnhealthyCount = null, bool? signupStatus = null, int? signupStatusCode = null, string signupStatusText = null, int? signupPhaseStatusCode = null, string signupPhaseStatusText = null, DateTimeOffset? peeringDbLastUpdateDateValue = null, string customerOrgName = null, string customerEmail = null, string customerTransitAsn = null, CustomerTransitState? customerTransitState = null, string customerAsn = null, float? customerAsnEstimatedEgressPeekGbps = null, string customerEntitlementSkuId = null, string customerEntitlementSkuGuid = null, string customerEntitlementSkuName = null, DateTimeOffset? customerEntitlementExpiration = null, string optionalProperty1 = null, string optionalProperty2 = null, string optionalProperty3 = null, string optionalProperty4 = null, string optionalProperty5 = null)
        {
            return new AdditionalCustomerProperties(
                customerPropertiesOverviewCacheEfficiency,
                customerPropertiesOverviewAverageEgressMbps,
                customerPropertiesOverviewAverageMissMbps,
                customerPropertiesOverviewEgressMbpsMax,
                customerPropertiesOverviewEgressMbpsMaxOn,
                customerPropertiesOverviewMissMbpsMax,
                customerPropertiesOverviewMissMbpsMaxOn,
                customerPropertiesOverviewCacheNodesHealthyCount,
                customerPropertiesOverviewCacheNodesUnhealthyCount,
                signupStatus,
                signupStatusCode,
                signupStatusText,
                signupPhaseStatusCode,
                signupPhaseStatusText,
                peeringDbLastUpdateDateValue,
                customerOrgName,
                customerEmail,
                customerTransitAsn,
                customerTransitState,
                customerAsn,
                customerAsnEstimatedEgressPeekGbps,
                customerEntitlementSkuId,
                customerEntitlementSkuGuid,
                customerEntitlementSkuName,
                customerEntitlementExpiration,
                optionalProperty1,
                optionalProperty2,
                optionalProperty3,
                optionalProperty4,
                optionalProperty5,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ConnectedCache.IspCacheNodeResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="ConnectedCache.IspCacheNodeResourceData"/> instance for mocking. </returns>
        public static IspCacheNodeResourceData IspCacheNodeResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CacheNodeProperty properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new IspCacheNodeResourceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MccCacheNodeBgpCidrDetails"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="bgpCidrs"> Mcc cache node resource Bgp Cidr properties. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <returns> A new <see cref="Models.MccCacheNodeBgpCidrDetails"/> instance for mocking. </returns>
        public static MccCacheNodeBgpCidrDetails MccCacheNodeBgpCidrDetails(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<string> bgpCidrs = null, IReadOnlyDictionary<string, string> tags = null, string location = null)
        {
            bgpCidrs ??= new List<string>();
            tags ??= new Dictionary<string, string>();

            return new MccCacheNodeBgpCidrDetails(
                id,
                name,
                resourceType,
                systemData,
                bgpCidrs != null ? new BgpCidrsConfiguration(bgpCidrs?.ToList(), serializedAdditionalRawData: null) : null,
                tags,
                location,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ConnectedCache.IspCustomerResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="ConnectedCache.IspCustomerResourceData"/> instance for mocking. </returns>
        public static IspCustomerResourceData IspCustomerResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CustomerProperty properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new IspCustomerResourceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }
    }
}
